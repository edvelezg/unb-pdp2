// Algorithm 1
// Assume C is the length of the compressed sequence (same as length of
// F,S,X) and U is the length of the uncompressed sequence. (You can get
// U by reducing [sum] F.)

//CHANGED: Exclusive-scan of F gives you Xl
//CHANGED: Loop over U threads Each thread i writes a 0 to item i in array A (creates a list A of length U where all elements are zero)
//CHANGED: Loop over C threads
//  Each thread i writes a 1 to item X[i] in array A UNLESS X[i] == 0
//    (A is now [0 0 0 1 0 0 0 0 0 0 1 0 0])
//CHANGED: Inclusive-scan A gives you B
//    (B is now [0 0 0 1 1 1 1 1 1 1 2 2 2])
//CHANGED: Loop over U threads: Each thread i reads item S[B[i]] into output
// 
// It's load balanced nicely, but takes a lot of kernels to do it,
// unfortunately.

// FINISH IMPLEMENT OLD ALGORITHM.
// TODO: Loop over i threads to N in Array X
// TODO: each tread writes from x[i] to x[i+1]

// Test OLD ALGORITHM with same standards

// TODO: Think of other ways to create synthetic tests.


